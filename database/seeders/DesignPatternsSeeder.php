<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\DB;

class DesignPatternsSeeder extends Seeder
{
    /**
     * Run the database seeds.
     */
    public function run(): void
    {
        // 使用固定的category_id值（1=创建型, 2=结构型, 3=行为型）
        $patterns = [
            // 创建型模式 (category_id = 1)
            [
                'category_id' => 1,
                'name_zh' => '工厂方法模式',
                'name_en' => 'Factory Method',
                'slug' => 'factory-method',
                'file_path_zh' => 'resources/design-patterns/laravel/creational/factory_method_zh.md',
                'file_path_en' => 'resources/design-patterns/laravel/creational/factory_method_en.md',
                'description_zh' => '定义一个创建对象的接口，但让子类决定实例化哪个类',
                'description_en' => 'Define an interface for creating an object, but let subclasses decide which class to instantiate',
                'is_published' => true,
                'sort_order' => 1,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'category_id' => 1,
                'name_zh' => '抽象工厂模式',
                'name_en' => 'Abstract Factory',
                'slug' => 'abstract-factory',
                'file_path_zh' => 'resources/design-patterns/laravel/creational/abstract_factory_zh.md',
                'file_path_en' => 'resources/design-patterns/laravel/creational/abstract_factory_en.md',
                'description_zh' => '提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类',
                'description_en' => 'Provide an interface for creating families of related or dependent objects without specifying their concrete classes',
                'is_published' => true,
                'sort_order' => 2,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'category_id' => 1,
                'name_zh' => '建造者模式',
                'name_en' => 'Builder',
                'slug' => 'builder',
                'file_path_zh' => 'resources/design-patterns/laravel/creational/builder_zh.md',
                'file_path_en' => 'resources/design-patterns/laravel/creational/builder_en.md',
                'description_zh' => '将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示',
                'description_en' => 'Separate the construction of a complex object from its representation so that the same construction process can create different representations',
                'is_published' => true,
                'sort_order' => 3,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'category_id' => 1,
                'name_zh' => '原型模式',
                'name_en' => 'Prototype',
                'slug' => 'prototype',
                'file_path_zh' => 'resources/design-patterns/laravel/creational/prototype_zh.md',
                'file_path_en' => 'resources/design-patterns/laravel/creational/prototype_en.md',
                'description_zh' => '用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象',
                'description_en' => 'Specify the kinds of objects to create using a prototypical instance, and create new objects by copying this prototype',
                'is_published' => true,
                'sort_order' => 4,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'category_id' => 1,
                'name_zh' => '单例模式',
                'name_en' => 'Singleton',
                'slug' => 'singleton',
                'file_path_zh' => 'resources/design-patterns/laravel/creational/singleton_zh.md',
                'file_path_en' => 'resources/design-patterns/laravel/creational/singleton_en.md',
                'description_zh' => '保证一个类仅有一个实例，并提供一个访问它的全局访问点',
                'description_en' => 'Ensure a class only has one instance, and provide a global point of access to it',
                'is_published' => true,
                'sort_order' => 5,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            // 结构型模式 (category_id = 2)
            [
                'category_id' => 2,
                'name_zh' => '适配器模式',
                'name_en' => 'Adapter',
                'slug' => 'adapter',
                'file_path_zh' => 'resources/design-patterns/laravel/structural/adapter_zh.md',
                'file_path_en' => 'resources/design-patterns/laravel/structural/adapter_en.md',
                'description_zh' => '将一个类的接口转换成客户希望的另外一个接口',
                'description_en' => 'Convert the interface of a class into another interface clients expect',
                'is_published' => true,
                'sort_order' => 6,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'category_id' => 2,
                'name_zh' => '桥接模式',
                'name_en' => 'Bridge',
                'slug' => 'bridge',
                'file_path_zh' => 'resources/design-patterns/laravel/structural/bridge_zh.md',
                'file_path_en' => 'resources/design-patterns/laravel/structural/bridge_en.md',
                'description_zh' => '将抽象部分与它的实现部分分离，使它们都可以独立地变化',
                'description_en' => 'Decouple an abstraction from its implementation so that the two can vary independently',
                'is_published' => true,
                'sort_order' => 7,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'category_id' => 2,
                'name_zh' => '组合模式',
                'name_en' => 'Composite',
                'slug' => 'composite',
                'file_path_zh' => 'resources/design-patterns/laravel/structural/composite_zh.md',
                'file_path_en' => 'resources/design-patterns/laravel/structural/composite_en.md',
                'description_zh' => '将对象组合成树形结构以表示"部分-整体"的层次结构',
                'description_en' => 'Compose objects into tree structures to represent part-whole hierarchies',
                'is_published' => true,
                'sort_order' => 8,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'category_id' => 2,
                'name_zh' => '装饰器模式',
                'name_en' => 'Decorator',
                'slug' => 'decorator',
                'file_path_zh' => 'resources/design-patterns/laravel/structural/decorator_zh.md',
                'file_path_en' => 'resources/design-patterns/laravel/structural/decorator_en.md',
                'description_zh' => '动态地给一个对象添加一些额外的职责',
                'description_en' => 'Attach additional responsibilities to an object dynamically',
                'is_published' => true,
                'sort_order' => 9,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'category_id' => 2,
                'name_zh' => '外观模式',
                'name_en' => 'Facade',
                'slug' => 'facade',
                'file_path_zh' => 'resources/design-patterns/laravel/structural/facade_zh.md',
                'file_path_en' => 'resources/design-patterns/laravel/structural/facade_en.md',
                'description_zh' => '为子系统中的一组接口提供一个一致的界面',
                'description_en' => 'Provide a unified interface to a set of interfaces in a subsystem',
                'is_published' => true,
                'sort_order' => 10,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'category_id' => 2,
                'name_zh' => '享元模式',
                'name_en' => 'Flyweight',
                'slug' => 'flyweight',
                'file_path_zh' => 'resources/design-patterns/laravel/structural/flyweight_zh.md',
                'file_path_en' => 'resources/design-patterns/laravel/structural/flyweight_en.md',
                'description_zh' => '运用共享技术有效地支持大量细粒度的对象',
                'description_en' => 'Use sharing to support large numbers of fine-grained objects efficiently',
                'is_published' => true,
                'sort_order' => 11,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'category_id' => 2,
                'name_zh' => '代理模式',
                'name_en' => 'Proxy',
                'slug' => 'proxy',
                'file_path_zh' => 'resources/design-patterns/laravel/structural/proxy_zh.md',
                'file_path_en' => 'resources/design-patterns/laravel/structural/proxy_en.md',
                'description_zh' => '为其他对象提供一种代理以控制对这个对象的访问',
                'description_en' => 'Provide a surrogate or placeholder for another object to control access to it',
                'is_published' => true,
                'sort_order' => 12,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            // 行为型模式 (category_id = 3)
            [
                'category_id' => 3,
                'name_zh' => '责任链模式',
                'name_en' => 'Chain of Responsibility',
                'slug' => 'chain-of-responsibility',
                'file_path_zh' => 'resources/design-patterns/laravel/behavioral/chain_of_responsibility_zh.md',
                'file_path_en' => 'resources/design-patterns/laravel/behavioral/chain_of_responsibility_en.md',
                'description_zh' => '使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系',
                'description_en' => 'Avoid coupling the sender of a request to its receiver by giving more than one object a chance to handle the request',
                'is_published' => true,
                'sort_order' => 13,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'category_id' => 3,
                'name_zh' => '命令模式',
                'name_en' => 'Command',
                'slug' => 'command',
                'file_path_zh' => 'resources/design-patterns/laravel/behavioral/command_zh.md',
                'file_path_en' => 'resources/design-patterns/laravel/behavioral/command_en.md',
                'description_zh' => '将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化',
                'description_en' => 'Encapsulate a request as an object, thereby letting you parameterize clients with different requests',
                'is_published' => true,
                'sort_order' => 14,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'category_id' => 3,
                'name_zh' => '解释器模式',
                'name_en' => 'Interpreter',
                'slug' => 'interpreter',
                'file_path_zh' => 'resources/design-patterns/laravel/behavioral/interpreter_zh.md',
                'file_path_en' => 'resources/design-patterns/laravel/behavioral/interpreter_en.md',
                'description_zh' => '给定一个语言，定义它的文法的一种表示，并定义一个解释器',
                'description_en' => 'Given a language, define a representation for its grammar along with an interpreter that uses the representation to interpret sentences in the language',
                'is_published' => true,
                'sort_order' => 15,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'category_id' => 3,
                'name_zh' => '迭代器模式',
                'name_en' => 'Iterator',
                'slug' => 'iterator',
                'file_path_zh' => 'resources/design-patterns/laravel/behavioral/iterator_zh.md',
                'file_path_en' => 'resources/design-patterns/laravel/behavioral/iterator_en.md',
                'description_zh' => '提供一种方法顺序访问一个聚合对象中各个元素，而又不需暴露该对象的内部表示',
                'description_en' => 'Provide a way to access the elements of an aggregate object sequentially without exposing its underlying representation',
                'is_published' => true,
                'sort_order' => 16,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'category_id' => 3,
                'name_zh' => '中介者模式',
                'name_en' => 'Mediator',
                'slug' => 'mediator',
                'file_path_zh' => 'resources/design-patterns/laravel/behavioral/mediator_zh.md',
                'file_path_en' => 'resources/design-patterns/laravel/behavioral/mediator_en.md',
                'description_zh' => '用一个中介对象来封装一系列的对象交互',
                'description_en' => 'Define an object that encapsulates how a set of objects interact',
                'is_published' => true,
                'sort_order' => 17,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'category_id' => 3,
                'name_zh' => '备忘录模式',
                'name_en' => 'Memento',
                'slug' => 'memento',
                'file_path_zh' => 'resources/design-patterns/laravel/behavioral/memento_zh.md',
                'file_path_en' => 'resources/design-patterns/laravel/behavioral/memento_en.md',
                'description_zh' => '在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态',
                'description_en' => 'Without violating encapsulation, capture and externalize an object\'s internal state so that the object can be restored to this state later',
                'is_published' => true,
                'sort_order' => 18,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'category_id' => 3,
                'name_zh' => '观察者模式',
                'name_en' => 'Observer',
                'slug' => 'observer',
                'file_path_zh' => 'resources/design-patterns/laravel/behavioral/observer_zh.md',
                'file_path_en' => 'resources/design-patterns/laravel/behavioral/observer_en.md',
                'description_zh' => '定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新',
                'description_en' => 'Define a one-to-many dependency between objects so that when one object changes state, all its dependents are notified and updated automatically',
                'is_published' => true,
                'sort_order' => 19,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'category_id' => 3,
                'name_zh' => '状态模式',
                'name_en' => 'State',
                'slug' => 'state',
                'file_path_zh' => 'resources/design-patterns/laravel/behavioral/state_zh.md',
                'file_path_en' => 'resources/design-patterns/laravel/behavioral/state_en.md',
                'description_zh' => '允许一个对象在其内部状态改变时改变它的行为',
                'description_en' => 'Allow an object to alter its behavior when its internal state changes',
                'is_published' => true,
                'sort_order' => 20,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'category_id' => 3,
                'name_zh' => '策略模式',
                'name_en' => 'Strategy',
                'slug' => 'strategy',
                'file_path_zh' => 'resources/design-patterns/laravel/behavioral/strategy_zh.md',
                'file_path_en' => 'resources/design-patterns/laravel/behavioral/strategy_en.md',
                'description_zh' => '定义一系列的算法，把它们一个个封装起来，并且使它们可相互替换',
                'description_en' => 'Define a family of algorithms, encapsulate each one, and make them interchangeable',
                'is_published' => true,
                'sort_order' => 21,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'category_id' => 3,
                'name_zh' => '模板方法模式',
                'name_en' => 'Template Method',
                'slug' => 'template-method',
                'file_path_zh' => 'resources/design-patterns/laravel/behavioral/template_method_zh.md',
                'file_path_en' => 'resources/design-patterns/laravel/behavioral/template_method_en.md',
                'description_zh' => '定义一个操作中的算法的骨架，而将一些步骤延迟到子类中',
                'description_en' => 'Define the skeleton of an algorithm in an operation, deferring some steps to subclasses',
                'is_published' => true,
                'sort_order' => 22,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'category_id' => 3,
                'name_zh' => '访问者模式',
                'name_en' => 'Visitor',
                'slug' => 'visitor',
                'file_path_zh' => 'resources/design-patterns/laravel/behavioral/visitor_zh.md',
                'file_path_en' => 'resources/design-patterns/laravel/behavioral/visitor_en.md',
                'description_zh' => '表示一个作用于某对象结构中的各元素的操作',
                'description_en' => 'Represent an operation to be performed on the elements of an object structure',
                'is_published' => true,
                'sort_order' => 23,
                'created_at' => now(),
                'updated_at' => now(),
            ],
        ];

        DB::table('design_patterns')->insert($patterns);
    }
}